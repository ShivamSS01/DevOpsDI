name: SFDX Deployment Pipeline

on:
  push:
    branches:
      - QA
      - UAT
      - master
  pull_request:
    branches:
      - 'feature/*'

jobs:
  sfdx_deployment_pipeline:
    name: SFDX Deployment Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 10000
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      COMMIT_ID: ${{ github.event.inputs.CommitID || 'default_commit_id' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Install SFDX CLI
        run: |
          echo 'Installing sfdx cli'
          npm install @salesforce/cli --global --unsafe-perm
      
      - name: Install Salesforce Git Delta Plugin
        run: echo y | sfdx plugins:install sfdx-git-delta

      - name: Generate SFDX Git Delta
        shell: pwsh
        run: |
          $prevCommitId = ""

          if ("${{ env.COMMIT_ID }}" -ne " " -or "") { 
              $prevCommitId = "${{ env.COMMIT_ID }}".Trim()
          } else {
              $prevCommitId = $(git rev-parse HEAD^)  
          }

          Write-Host "Previous Commit ID : $prevCommitId"

          mkdir delta
          sfdx sgd:source:delta --from $prevCommitId --output delta/ --generate-delta

          $destructivePath = "delta/destructiveChanges/destructiveChanges.xml" 
          $destructiveChanges = Get-Content $destructivePath

          $destructiveChangesCheck = $destructiveChanges | Out-String
          if (($destructiveChangesCheck.Contains("<members>")) -and ($destructiveChangesCheck.Contains("<types>"))) {
              Write-Host "Destructive Changes found"
              echo "::set-output name=isDestructive::True"
          } else {
              Write-Host "No Destructive Changes found"
              echo "::set-output name=isDestructive::False"
          }

          $sourcePath = "delta/package/package.xml"
          $destinationPath = "delta/src" 
          if (Test-Path -Path $destinationPath) { 
              Write-Host "Moving.."
              Move-Item -path $sourcePath -destination $destinationPath

      - name: Salesforce PWD Scanner (Code Analyzer)
        run: |
          sf plugins:install @salesforce/sfdx-scanner
          sf scanner:run --target "delta/src/classes/**"
          sf scanner:run --target "delta/src/lwc/**"
          sf scanner:run --target "delta/src/aura/**"

      - name: JWT Authorization for Salesforce
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/QA" ]] || [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "refs/heads/QA" ]]; then
            sf org login jwt --client-id ${{ secrets.SFDX_CONSUMERKEY}} --jwt-key-file ${{ secrets.SFDX_SERVERKEY}} --username ${{ secrets.SFDX_USERNAME }} --instance-url https://login.salesforce.com
            echo "sfusername=${{ secrets.SFDX_USERNAME }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/UAT" ]] || [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "refs/heads/UAT" ]]; then
            sf org login jwt --client-id ${{ secrets.SFDX_CONSUMERKEY }} --jwt-key-file ${{ secrets.SFDX_SERVERKEY}} --username ${{ secrets.SFDX_USERNAME}} --instance-url https://login.salesforce.com
            echo "sfusername=${{ secrets.SFDX_USERNAME }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "refs/heads/master" ]]; then
            sf org login jwt --client-id ${{ secrets.SFDX_CONSUMERKEY}} --jwt-key-file ${{ secrets.SFDX_SERVERKEY}} --username ${{ secrets.SFDX_USERNAME }} --instance-url https://login.salesforce.com
            echo "sfusername=${{ secrets.SFDX_USERNAME }}" >> $GITHUB_ENV
          fi
        
      - name: Validating Using SFDX CLI
        if: ${{ success() && github.event.pull_request.base.ref != '' }}
        shell: pwsh
        run: |
          $SFORGUSERNAME = "${{ env.sfusername }}"
          $TstClassType = "${{ steps.deltaChanges.outputs.TestType }}"
          Write-Host "Validation on $SFORGUSERNAME..."
          $isDestructiveFound = "${{ steps.deltaChanges.outputs.isDestructive }}"
          $srcFolder = "delta/src"
          if ($isDestructiveFound -eq "True") {
            Write-Host "Validating Destructive changes"
            if (!(Test-Path -Path $srcFolder)) {
              $sfCommand = "sf project deploy start --pre-destructive-changes delta/destructiveChanges/destructiveChanges.xml --manifest delta/package/package.xml -o $SFORGUSERNAME $TstClassType -w 1000"
              Write-Host "Only Deletion -> $sfCommand"
              Invoke-Expression $sfCommand
            } else {
              $sfCommand = "sf project deploy start --pre-destructive-changes delta/destructiveChanges/destructiveChanges.xml --manifest delta/src/package.xml -o $SFORGUSERNAME $TstClassType -w 1000"
              Write-Host "Deletion and Modification -> $sfCommand"
              Invoke-Expression $sfCommand
            }
          } else {
            if (Test-Path -Path $srcFolder) {  
              $sfCommand = "sf project deploy start --source-dir delta/src/. -o $SFORGUSERNAME $TstClassType -w 1000"
              Write-Host "Validating changes -> $sfCommand"
              Invoke-Expression $sfCommand
            } else {
              Write-Host "No Code found for deployment.."
            }

      - name: Deployment Using SFDX CLI
        if: ${{ success() && github.event.pull_request.base.ref == '' }}
        shell: pwsh
        run: |
          $SFORGUSERNAME = "${{ env.sfusername }}"
          Write-Host "Deploying on $SFORGUSERNAME..."
          $isDestructiveFound = "${{ steps.deltaChanges.outputs.isDestructive }}"
          $srcFolder = "delta/src"
          if ($isDestructiveFound -eq "True") {
            Write-Host "Deploying Destructive changes"
            if (!(Test-Path -Path $srcFolder)) {
              Write-Host "Only Deletion"
              sf project deploy start --pre-destructive-changes delta/destructiveChanges/destructiveChanges.xml --manifest delta/package/package.xml -o $SFORGUSERNAME -w 1000
            } else {
              Write-Host "Deletion and Modification"
              sf project deploy start --pre-destructive-changes delta/destructiveChanges/destructiveChanges.xml --manifest delta/src/package.xml -o $SFORGUSERNAME -w 1000
            }
          } else {
            if (Test-Path -Path $srcFolder) {
              Write-Host "Deploying changes"
              sf project deploy start --source-dir delta/src/. -o $SFORGUSERNAME -w 1000
            } else {
              Write-Host "No Code found for deployment.."
            }
