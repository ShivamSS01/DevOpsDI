name: Generate SFDX Git Delta

on: [push]

jobs:
  generate-delta:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Fetch the last two commits

      - name: Set up Node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: '20'

      - name: Install SFDX CLI
        run: npm install sfdx-cli --global --unsafe-perm

      - name: Verify SFDX CLI Installation
        run: sfdx --version

      - name: Install Salesforce Git Delta Plugin
        run: echo y | sfdx plugins:install sfdx-git-delta

      - name: Verify Salesforce Git Delta Plugin Installation
        run: sfdx plugins --core

      - name: Generate SFDX Git Delta
        shell: pwsh
        run: |
          $prevCommitId = ""

          # Validate COMMIT_ID environment variable
          if ("${{ env.COMMIT_ID }}" -ne " " -and "${{ env.COMMIT_ID }}" -ne "") { 
              $prevCommitId = "${{ env.COMMIT_ID }}".Trim()
          } else {
              $prevCommitId = $(git rev-parse HEAD~1)  # Use the previous commit
          }

          Write-Host "Previous Commit ID : $prevCommitId"

          mkdir delta
          Write-Host "Generating delta..."
          sfdx sgd:source:delta --from $prevCommitId --output delta/ --generate-delta
          Write-Host "Delta generation completed."

      - name: List delta directory contents
        run: |
          echo "Listing contents of delta directory:"
          ls -R delta

      - name: Verify and Read Destructive Changes
        shell: pwsh
        run: |
          $destructivePath = "delta/destructiveChanges/destructiveChanges.xml"
          
          if (Test-Path $destructivePath) {
              $destructiveChanges = Get-Content $destructivePath
              Write-Host "Destructive Changes:"
              Write-Host $destructiveChanges
          } else {
              Write-Host "destructiveChanges.xml file does not exist at the specified path."
              exit 1
          }

      - name: Verify and Read Package XML
        shell: pwsh
        run: |
          $packagePath = "delta/package/package.xml"
          
          if (Test-Path $packagePath) {
              $packageContents = Get-Content $packagePath
              Write-Host "Package XML Contents:"
              Write-Host $packageContents
          } else {
              Write-Host "package.xml file does not exist at the specified path."
              exit 1
          }
